unit Dao.PlanoContas;

interface

uses System.SysUtils, System.classes, Model.PlanoContas, Dao.Interfaces, dbSQL.Interfaces, Data.DB,
     Dao.Parametro;

type
  TDaoPlanoConta = class(TInterfacedObject, iDao<TModelPlanoContas>)
  private
    FdbCommand : iDB_SQLCommand;
    function ExecuteCommand(pCriterio : string) : TDataSet;
  public
    constructor Create(AOwner: TComponent; ADB_SQLCommand : iDB_SQLCommand);
    destructor Destroy; override;
    procedure Inserir(pPlanoContas: TModelPlanoContas);
    procedure Alterar(pPlanoContas: TModelPlanoContas);
    procedure Excluir(pIdPlano: Integer);
    function Listar(pParametro : iParametroSQL) : TDataSet;

  end;

implementation

{ TípoContaDao }

constructor TDaoPlanoConta.Create(AOwner: TComponent; ADB_SQLCommand: iDB_SQLCommand);
begin
   FdbCommand := ADB_SQLCommand;
end;

destructor TDaoPlanoConta.Destroy;
begin

  inherited;
end;

function TDaoPlanoConta.ExecuteCommand(pCriterio: string) : TDataSet;
begin

   try
     Result := FdbCommand.ExecutarSelect('select ID_PLANO, PLANO, TIPO from PLANO_CONTAS ' + pCriterio + ' order by plano');
   except on e : Exception do
       begin
           raise Exception.Create(e.Message);
       end;
   end;

end;

procedure TDaoPlanoConta.Alterar(pPlanoContas: TModelPlanoContas);
begin
   try
      pPlanoContas.Validar;

      FdbCommand.ExecutarSQL
         ('update PLANO_CONTAS' + sLineBreak +
          'set PLANO = ' + pPlanoContas.Plano.QuotedString + ',' + sLineBreak +
          '    TIPO  = ' + Integer(pPlanoContas.Tipo).ToString + sLineBreak +
          'where (ID_PLANO = ' + pPlanoContas.IdPlano.ToString +')'
         );
   except on e : Exception do
       begin
           raise Exception.Create(e.Message);
       end;
   end;
end;

procedure TDaoPlanoConta.Excluir(pIdPlano: Integer);
begin
   try
      FdbCommand.ExecutarSQL( 'delete from PLANO_CONTAS where (ID_PLANO = ' + pIdPlano.ToString +')');
   except on e : Exception do
       begin
           raise Exception.Create(e.Message);
       end;
   end;
end;

procedure TDaoPlanoConta.Inserir(pPlanoContas: TModelPlanoContas);
begin
   try
      pPlanoContas.Validar;

      FdbCommand.ExecutarSQL
      ('insert into PLANO_CONTAS (PLANO, TIPO)' + sLineBreak +
       'values (' + pPlanoContas.Plano.QuotedString + ', ' + Integer(pPlanoContas.Tipo).ToString
      );
   except on e : Exception do
       begin
           raise Exception.Create(e.Message);
       end;
   end;

end;

function TDaoPlanoConta.Listar(pParametro : iParametroSQL): TDataSet;
begin
   Result := Self.ExecuteCommand(pParametro.ToString);
end;

end.
