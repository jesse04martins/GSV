unit uSalvarCorrecaoPlanoConta;

interface

uses System.SysUtils, System.Classes, View.Operacoes.interfaces, Model.PlanoContas, Dao.PlanoContas,
     dbSQL.Interfaces, Data.DB, Model.Enum;

type
  TSalvarCorrecaoPlanoConta = class(TInterfacedObject, iViewOperacao<TModelPlanoContas>)
  private
    FDB_SQLCommand: iDB_SQLCommand;
    FModel : TModelPlanoContas;
  public
    constructor Create(pDataSet: TDataSet; ADB_SQLCommand : iDB_SQLCommand);
    destructor Destroy; override;
    procedure Execute(value : TModelPlanoContas);
    function GetValue : TModelPlanoContas;
  end;


implementation

{ TSalvarCorrecaoPlanoConta }

constructor TSalvarCorrecaoPlanoConta.Create(pDataSet: TDataSet; ADB_SQLCommand: iDB_SQLCommand);
begin
   FDB_SQLCommand := ADB_SQLCommand;

   FModel.IdPlano := pDataSet.FieldByName('id_plano').AsInteger;
   FModel.Plano   := pDataSet.FieldByName('plano').AsString;
   FModel.Tipo    := TTipoPlanoConta( pDataSet.FieldByName('tipo').AsInteger);

end;

destructor TSalvarCorrecaoPlanoConta.Destroy;
begin
   FreeAndNil(FModel);
   inherited;
end;

procedure TSalvarCorrecaoPlanoConta.Execute(value: TModelPlanoContas);
begin
   try
      TDaoPlanoConta.Create(FDB_SQLCommand.GetOwner, FDB_SQLCommand).Alterar(value);
   except on e : Exception do
       begin
          raise Exception.Create(e.Message);
       end;
   end;

end;

function TSalvarCorrecaoPlanoConta.GetValue: TModelPlanoContas;
begin
   Result := FModel;
end;

end.
